import{_ as s,c as i,o as e,a2 as a}from"./chunks/framework.CeQAp18V.js";const n="/assets/layout.CVJzAT0U.png",g=JSON.parse('{"title":"File System","description":"","frontmatter":{"outline":[2,3]},"headers":[],"relativePath":"book/p6_file.md","filePath":"book/p6_file.md"}'),t={name:"book/p6_file.md"},l=a(`<h1 id="file-system" tabindex="-1">File System <a class="header-anchor" href="#file-system" aria-label="Permalink to &quot;File System&quot;">​</a></h1><p>In the last project, you have seen how to read and write disk blocks, and you will now learn about how to build a <strong>file system</strong>. A file system controls the disk and provides the interface of <strong>files</strong> and <strong>directories</strong> (aka. folders) to end users, which you must have been familiar with through your everyday interaction with operating systems. There are numerous file systems and many of them are based on an abstraction called <strong>inode</strong>. We thus start by explaining this important file system abstraction.</p><h2 id="inode" tabindex="-1">Inode <a class="header-anchor" href="#inode" aria-label="Permalink to &quot;Inode&quot;">​</a></h2><p>Consider an inode as a number of blocks and a file system as an array of inodes. Say a file system maintains 1024 inodes and each inode holds the information of a file or a directory. For example, inodes in a file system could be used as follows.</p><ol><li>Inode #12 holds 1 disk block for a small text file.</li><li>Inode #103 holds 31 disk blocks for the executable file of the <code>cat</code> user command.</li><li>Inode #781 holds 1 disk block for the <code>/bin</code> directory recording the information of all files under <code>/bin</code>. This directory typically holds executable files of user commands.</li></ol><p>The <code>mkfs</code> tool gives a simple and concrete example of how inodes could be organized.</p><h3 id="use-of-inodes-in-mkfs" tabindex="-1">Use of inodes in <code>mkfs</code> <a class="header-anchor" href="#use-of-inodes-in-mkfs" aria-label="Permalink to &quot;Use of inodes in \`mkfs\`&quot;">​</a></h3><p>When you type <code>make install</code> or <code>make qemu</code> in egos-2000, the command will compile and run <code>tools/mfks.c</code> which produces a disk image file. Below is part of its output.</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> make install</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[INFO] Load ino</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">0,</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> 34</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bytes</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[INFO] Load ino</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">1,</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> 48</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bytes</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[INFO] Load ino</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">2,</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> 26</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bytes</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[INFO] Load ino</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">3,</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> 15</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bytes</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[INFO] Load ino</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">4,</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> 15</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bytes</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[INFO] Load ino</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">5,</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> 348</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bytes</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[INFO] Load ino</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">7,</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> cat.elf:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 15600</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bytes</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[INFO] Load ino</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">8,</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> vga_demo.elf:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 9364</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bytes</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[INFO] Load ino</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">9,</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> loop.elf:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 11188</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bytes</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[INFO] Load ino</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">10,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.elf:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 15644</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bytes</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[INFO] Load ino</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">11,</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> crash1.elf:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 16772</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bytes</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[INFO] Load ino</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">12,</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> crash2.elf:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 9432</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bytes</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[INFO] Load ino</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">13,</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ls.elf:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10408</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bytes</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[INFO] Load ino</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">14,</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> udp_demo.elf:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 14760</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bytes</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[INFO] Load ino</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">15,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.elf:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10144</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bytes</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[INFO] Load ino</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">6,</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ./</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   6</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ../</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cat</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   7</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vga_demo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   8</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> loop</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   9</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cd</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  10</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> crash1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  11</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> crash2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  12</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ls</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  13</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> udp_demo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  14</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> echo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  15</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>Let&#39;s take a closer look at these 16 inodes numbered from #0 to #15.</p><h4 id="inodes-for-directories" tabindex="-1">Inodes for directories <a class="header-anchor" href="#inodes-for-directories" aria-label="Permalink to &quot;Inodes for directories&quot;">​</a></h4><p>Inode #0..#4 and #6 are used for directories. The table below summarizes how the code in <code>tools/mfks.c</code> uses these inodes.</p><table tabindex="0"><thead><tr><th>Inode Number</th><th>Corresponding directory</th><th>Bytes stored in the inode</th></tr></thead><tbody><tr><td>#0</td><td><code>/</code></td><td><code>./ 0 ../ 0 home/ 1 bin/ 6 </code></td></tr><tr><td>#1</td><td><code>/home</code></td><td><code>./ 1 ../ 0 yunhao/ 2 rvr/ 3 yacqub/ 4 </code></td></tr><tr><td>#2</td><td><code>/home/yunhao</code></td><td><code>./ 2 ../ 1 README 5 </code></td></tr><tr><td>#3</td><td><code>/home/rvr</code></td><td><code>./ 3 ../ 1 </code></td></tr><tr><td>#4</td><td><code>/home/yacqub</code></td><td><code>./ 4 ../ 1 </code></td></tr><tr><td>#6</td><td><code>/bin</code></td><td><code>./ 6 ../ 0 cat 7 vga_demo 8 loop 9 cd 10 crash1 11 crash2 12 ls 13 udp_demo 14 echo 15</code></td></tr></tbody></table><p>First, every directory contains <code>./</code> and <code>../</code> corresponding to itself and its parent directory. For example, the parent directory of both <code>/bin</code> and <code>/home</code> is <code>/</code>, illustrated by the <code>../ 0</code> part of inode #1 and #6. In general, egos-2000 uses the format <code>{name} {inode no} ...</code> to represent a directory. If a <code>{name}</code> ends with <code>/</code>, this name would represent a sub-directory (e.g., <code>rvr/</code> in inode #1). Otherwise, this name represents a file (e.g., <code>README</code> in inode #2). We use this convention for directories just because it is simple. In most file systems, these inodes would record more information such as file size or file creation time.</p><p>All the inodes in this table hold fewer than 512 bytes, so they all hold only one disk block.</p><h4 id="inodes-for-files" tabindex="-1">Inodes for files <a class="header-anchor" href="#inodes-for-files" aria-label="Permalink to &quot;Inodes for files&quot;">​</a></h4><p>Inode #5 and #7..#15 are used for files. For example, as shown in the table above, inode #5 is for <code>/home/yunhao/README</code> which is a short text file. The content of this text file is defined by the 348 bytes of <code>contents[5]</code> in <code>tools/mkfs.c</code>. Since 348 is smaller than the 512-byte block size, inode #5 also holds only one disk block for this file.</p><p>As shown in the <code>mkfs</code> printing above, inode #7..#15 are used for the binary executable files of user commands, while these inodes hold more than one block because these executable files are larger than 512 bytes. For example, user command <code>echo</code> corresponds to inode #15 which holds 10144 bytes (i.e., <code>ceil(10144/512)=20</code> disk blocks).</p><p>Lastly, <code>NINODES</code> is defined as 128 in header file <code>library/file/inode.h</code>, and <code>mkfs</code> uses <code>NINODES</code> to initialize the file system. This means that the file system supports 128 inodes, but only 16 of them are used when egos-2000 first starts to boot.</p><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p>Our goal is to give you a concrete and minimal example of how a file system could be organized as an array of inodes. Make sure that you see how different inodes can hold different numbers of disk blocks and how an inode can be used as either a file or a directory. In the rest of P6, we will focus on the inode abstraction and ignore how a file system maps files or directories into inodes.</p></div><h3 id="the-inode-store-interface" tabindex="-1">The inode store interface <a class="header-anchor" href="#the-inode-store-interface" aria-label="Permalink to &quot;The inode store interface&quot;">​</a></h3><p>In addition to <code>NINODES</code>, the header file <code>library/file/inode.h</code> defines <code>inode_intf</code>.</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> inode_store</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> inode_intf;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /* inode store interface */</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> inode_store {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">getsize)(inode_intf self, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ino);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">setsize)(inode_intf self, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ino, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newsize);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">read)(inode_intf self, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ino, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> offset, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">block_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> block);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">write)(inode_intf self, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ino, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> offset, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">block_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> block);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    void*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> state;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>In short, <code>inode_store</code> defines the file system interface in egos-2000 and there are two file systems (i.e., <code>file0.c</code> and <code>file1.c</code> under <code>library/file</code>) implementing this interface. In particular, each file system implements 4 functions <code>read</code>, <code>write</code>, <code>getsize</code> and <code>setsize</code>, as well as maintaining a certain <code>state</code> in the memory. Given that a pointer holds 4 bytes, <code>struct inode_store</code> simply holds 20 bytes and the first 16 bytes hold the addresses of the 4 interface functions (i.e., the address of their first instruction).</p><p>If you are familiar with object-oriented programming, you may consider <code>inode_store</code> as an interface (aka. template), and a file system as a class with a local variable and four methods implementing this interface. This explains the <code>self</code> argument of the interface functions, so a file system could access its in-memory state with <code>self-&gt;state</code>. In C, <code>self</code> simply holds 4 bytes as the address of the 20-byte <code>struct inode_store</code>.</p><p>For <code>read</code> and <code>write</code>, there are 3 more arguments: <code>ino</code> is the inode number, <code>offset</code> is the block number, and <code>block</code> is the memory address of 512 bytes holding the block data. For example, as we have seen, the executable of <code>echo</code> maps to inode #15 which holds 20 blocks. We can thus read inode #15 with an offset in range 0..19.</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Variable block holds 512 bytes in the memory</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">block_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> block;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Given \`inode_intf fs\`, read the 5th block from block 0..19 of inode #15</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fs, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">15</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">block</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="a-simple-file-system" tabindex="-1">A simple file system <a class="header-anchor" href="#a-simple-file-system" aria-label="Permalink to &quot;A simple file system&quot;">​</a></h3><p>We now explain a simple file system in <code>library/file/file0.c</code> which implements the inode store interface. We start with the <code>mydisk_init</code> function.</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">inode_intf </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mydisk_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(inode_intf </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">below</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> below_ino</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    inode_intf self </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> malloc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">sizeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> inode_store));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    self-&gt;getsize   </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mydisk_getsize;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    self-&gt;setsize   </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mydisk_setsize;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    self-&gt;read      </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mydisk_read;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    self-&gt;write     </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mydisk_write;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    self-&gt;state     </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> below;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> self;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>The code allocates 20 bytes for the inode store interface, and sets the 4 interface functions as the <code>mydisk_*</code> functions right before <code>mydisk_init</code>. Then <code>below</code> is recorded as <code>self-&gt;state</code> since the file system will need <code>below</code> for reading and writing the disk. Specifically, in <code>apps/system/sys_file.c</code>, there is another inode store called <code>disk</code> which simply reads or writes the disk with an offset while ignoring the inode number. A pointer to this <code>disk</code> variable is passed to <code>mydisk_init</code> as the <code>below</code> argument. This <code>disk</code> (or <code>self-&gt;state</code>) is used in functions <code>mydisk_read</code> and <code>mydisk_write</code> as follows.</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DUMMY_DISK_OFFSET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ino</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">offset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) ino </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 128</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> offset</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mydisk_read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(inode_intf </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> ino</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> offset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">block_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> block</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    inode_intf below </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> self-&gt;state;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> below-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(below, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DUMMY_DISK_OFFSET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ino, offset), block);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mydisk_write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(inode_intf </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> ino</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> offset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">block_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> block</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    inode_intf below </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> self-&gt;state;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> below-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(below, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DUMMY_DISK_OFFSET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ino, offset), block);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>This simple file system assumes that every inode holds at most 128 blocks, and operations to <code>(ino, offset)</code> are directly translated to reading or writing disk block <code>ino*128+offset</code>. For now, the <code>mydisk_getsize</code> and <code>mydisk_setsize</code> functions simply print out an error and halt, meaning that they could be useful but not being used in egos-2000.</p><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p>You will start from here and implement your own file system within the <code>mydisk_*</code> functions. Make sure to set <code>FILESYS = 0</code> in <code>Makefile</code>, so <code>mkfs</code> and egos-2000 will run your file system code in <code>file0.c</code>. Specifically, after <code>make install</code>, you should see <code>MKFS is using *mydisk*</code>.</p></div><h2 id="a-more-structured-file-system" tabindex="-1">A more structured file system <a class="header-anchor" href="#a-more-structured-file-system" aria-label="Permalink to &quot;A more structured file system&quot;">​</a></h2><p>Your job in this project is to implement some more sophisticated data structurs for the inode store interface functions. When you modify such data structures, you typically need to read a disk block into memory, apply your modifications in the memory, and write the block back from memory to the disk. The data structures here are not very complex, but students often mess up what is in the memory and what is on the disk, leading to subtle bugs.</p><p>Specifically, you will implement a few linked lists on top of the disk which is similar to the <a href="https://en.wikipedia.org/wiki/File_Allocation_Table" target="_blank" rel="noreferrer">FAT file system</a>. We now explain how you would maintain the inodes, a linked list for each inode, and a linked list for all the unused blocks on the disk.</p><h3 id="linked-list" tabindex="-1">Linked list <a class="header-anchor" href="#linked-list" aria-label="Permalink to &quot;Linked list&quot;">​</a></h3><p>Suppose inode #28 has 3 blocks being #100, #202 and #432 on the disk. We can then use a simple linked list data structure to represent this inode as follows.</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> inode {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> size, head;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">inodes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">128</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">inodes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">28</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].size </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">inodes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">28</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].head </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> entry {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> next;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">FAT_entry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[DISK_SIZE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BLOCK_SIZE];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">FAT_entry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 202</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">FAT_entry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">202</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 432</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">FAT_entry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">432</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>We call it <code>FAT_entry</code> because it is similar to how the FAT file system maintains a linked list. However, if you define <code>inodes</code> and <code>FAT_entry</code> in C like above, they will be in the memory. Instead, we should put these two arrays on the disk.</p><h3 id="create-the-disk-layout" tabindex="-1">Create the disk layout <a class="header-anchor" href="#create-the-disk-layout" aria-label="Permalink to &quot;Create the disk layout&quot;">​</a></h3><p>This picture shows how you could put the linked list data structures on the disk.</p><p><img src="`+n+`" alt="Failed to load picture"></p><p>We split the disk into 4 regions. The first block is called the super block. The next <code>I</code> blocks are called inode blocks, holding the <code>inodes</code> array. The next <code>F</code> blocks are called FAT table blocks, holding the <code>FAT_entry</code> array. All the other blocks starting from <code>I+F+1</code> are used as data blocks. Given the size of <code>struct inode</code> and <code>struct entry</code>, an inode block holds 64 <code>struct inode</code> and a FAT table block holds 128 <code>struct entry</code>.</p><p>Therefore, for <code>FAT_entry[100] = 202</code>, we can read block <code>I+1</code> into memory as an array of 128 entries, modify entry #100, and write it back to the disk. Similarly, for <code>FAT_entry[202]</code>, we should read block <code>I+2</code> into memory, modify entry #74 (i.e., 74=202%128), and write it back to the disk. Modifying the <code>inodes</code> array with disk blocks <code>1..I</code> is similar.</p><p>Given the explanations above, your first task is to implement the <code>mydisk_create</code> function. This function initializes a file system on the disk, a process also known as <a href="https://en.wikipedia.org/wiki/Disk_formatting" target="_blank" rel="noreferrer">disk formatting</a>. Specifically, you will do the following.</p><ul><li>Calculate <code>I</code> and <code>F</code> based on the number of inodes and the disk size.</li><li>Set the <code>size</code> of all the inodes to 0; Set the <code>head</code> of all the inodes to -1.</li><li>Create one linked list containing blocks <code>I+F+1..N</code>, which is called the free list.</li><li>Define a data structure for the super block which records <code>I</code>, <code>F</code>, as well as the head of the free list; Write to the super block with this data structure.</li><li>You don&#39;t have to touch the data blocks.</li></ul><p>After the above steps, we will have a file system with all the inodes empty and all the data blocks in the free list. You may also read the <code>treedisk_create</code> function in <code>library/file/file1.c</code> as a reference.</p><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p>Many file systems maintain a tree data structure instead of linked lists. The most widely-used one is probably <a href="https://en.wikipedia.org/wiki/B-tree" target="_blank" rel="noreferrer">B-tree</a> which has a query complexity much lower than linked lists. Indeed, our solution for this project runs slower than <code>treedisk</code> on QEMU, reflecting the difference in complexity.</p></div><h3 id="read-and-write-an-inode" tabindex="-1">Read and write an inode <a class="header-anchor" href="#read-and-write-an-inode" aria-label="Permalink to &quot;Read and write an inode&quot;">​</a></h3><p>Your next task is to implement <code>mydisk_read</code> and <code>mydisk_write</code>. Intuitively, <code>mydisk_read</code> involves the following steps.</p><ul><li>Read an inode block and find the <code>struct inode</code> corresponding to the <code>ino</code> argument.</li><li>Make sure that <code>offset</code> is smaller than the inode <code>size</code>.</li><li>Traverse from the start of the linked list (i.e., inode <code>head</code>) by <code>offset</code> times, and find the disk block number for the data block.</li><li>Read the data block into the <code>block</code> argument of <code>mydisk_read</code>.</li></ul><p>The steps for <code>mydisk_write</code> are similar with one key difference. If the <code>offset</code> argument is larger than (or equal to) the inode <code>size</code>, you need to remove some blocks from the free list and add them to the linked list of the inode. This is likely the trickiest part in this project and make sure that you have updated all 4 disk regions correctly.</p><p>After implementing these two functions, egos-2000 should be able to run normally.</p><h3 id="get-and-set-inode-size" tabindex="-1">Get and set inode size <a class="header-anchor" href="#get-and-set-inode-size" aria-label="Permalink to &quot;Get and set inode size&quot;">​</a></h3><p>Your last task is to implement <code>mydisk_getsize</code> and <code>mydisk_setsize</code>. <code>getsize</code> should be easy since it is a subset of the <code>read</code> function. For <code>setsize</code>, you can start by implementing the case of <code>nblocks</code> being 0. Then you can think about how to design helper functions that are shared by <code>setsize</code> and <code>write</code> when <code>nblocks</code> is not 0.</p><p>Since egos-2000 does not use these functions, we provide a separate testing framework.</p><h2 id="test-your-file-system-code" tabindex="-1">Test your file system code <a class="header-anchor" href="#test-your-file-system-code" aria-label="Permalink to &quot;Test your file system code&quot;">​</a></h2><p>We provide a testing framework for your file system code in <a href="https://github.com/yhzhang0128/tiny-test" target="_blank" rel="noreferrer">this repo</a>. Specifically, you can replace the <code>file0.c</code> in this repo with your code and follow the instructions in the README. To write a test, you write a trace file similar to the <code>trace.txt</code> in this repo:</p><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>W:0:0:123456789</span></span>
<span class="line highlighted"><span>W:1:0:1234567</span></span>
<span class="line"><span>W:1:1:333333</span></span>
<span class="line"><span>R:0:0:123456789</span></span>
<span class="line highlighted"><span>R:1:0:1234567</span></span>
<span class="line"><span>R:1:1:333333</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><code>W:1:0:1234567</code> means to issue a write operation to your file system with inode #1, offset 0, and block data filled by 1234567. <code>R:1:0:1234567</code> means to issue a read operation to your file system with inode #1 and offset 0, and then check whether the block data returned by your file system still holds 1234567.</p><p>You should write a lot more test traces that are more complex than <code>trace.txt</code> which would test your file system code comprehensively. Try to examine all the corner cases.</p><h2 id="accomplishments" tabindex="-1">Accomplishments <a class="header-anchor" href="#accomplishments" aria-label="Permalink to &quot;Accomplishments&quot;">​</a></h2><p>You have gained hands-on experience with the abstraction of <strong>inode</strong>, <strong>file</strong>, and <strong>directory</strong>. In terms of code reading, you have finished reading <code>library/file</code> and <code>tools/mkfs.c</code>. You may also spend a bit of time reading <code>apps/system/sys_file.c</code> which serves all file system requests as a system process in egos-2000.</p>`,65),h=[l];function d(o,p,r,k,c,y){return e(),i("div",null,h)}const m=s(t,[["render",d]]);export{g as __pageData,m as default};
