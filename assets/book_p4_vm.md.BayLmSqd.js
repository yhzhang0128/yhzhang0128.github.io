import{_ as s,c as e,o as a,a2 as i}from"./chunks/framework.CeQAp18V.js";const t="/assets/elf_load.BniPQ1lt.jpg",n="/assets/soft_tlb1.Ch62Krej.jpg",l="/assets/soft_tlb2.DarFMX7U.jpg",p="/assets/page_table1.CmCwOPXd.jpg",o="/assets/page_table2.C2SmDf9c.jpg",h="/assets/satp.7bx7HRL3.png",r="/assets/vpn.DtNbnFO8.png",d="/assets/ppn.C4D6c6It.png",w=JSON.parse('{"title":"Virtual Memory","description":"","frontmatter":{"outline":[2,3]},"headers":[],"relativePath":"book/p4_vm.md","filePath":"book/p4_vm.md"}'),c={name:"book/p4_vm.md"},k=i(`<h1 id="virtual-memory" tabindex="-1">Virtual Memory <a class="header-anchor" href="#virtual-memory" aria-label="Permalink to &quot;Virtual Memory&quot;">​</a></h1><p>An important goal of <strong>virtual memory</strong> is to ensure that a user process can only access its own memory. In particular, it should not be allowed to access the kernel memory or memory of another process. In P3, you have learned about PMP, and hence, we start by introducing an implementation of virtual memory that combines PMP with a mechanism called software TLB, which takes only 20 lines of code without any special CPU support.</p><p>This simple implementation helps you understand precisely the interface and functionalities of virtual memory. We then introduce <strong>page table translation</strong>, a more complex but also more widely-used CPU support for virtual memory. Your job is to implement virtual memory using page table translation and provide the same functionalities as PMP + software TLB.</p><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p>We will use <strong>process</strong> instead of <strong>thread</strong> throughout this project. Typically, threads can access the memory of each other just like what you have implemented in P1. In contrast, a process typically cannot access the memory of another process, and such isolation is enforced by virtual memory. This project will demonstrate such difference precisely with page table translation.</p></div><h2 id="software-tlb" tabindex="-1">Software TLB <a class="header-anchor" href="#software-tlb" aria-label="Permalink to &quot;Software TLB&quot;">​</a></h2><p>Consider two processes and they wish to use the same memory region. For example, all the processes in egos-2000 use <code>0x80400000</code> as the top of their stack (i.e., <code>APPS_STACK_TOP</code> in <code>library/egos.h</code>). Virtual memory means that the operating system creates an <em>illusion</em> that a process can <em>exclusively</em> use the memory below <code>0x80400000</code> for its stack.</p><p>For example, suppose two processes both use the load instruction with <code>0x803FFFFC</code> as the address to read the highest 4 bytes of their stack. To provide the illusion, this <code>0x803FFFFC</code> will be <strong>translated</strong> into two different addresses when accessing the memory. In other words, even though the two processes execute exactly the same instruction, the CPU can read two different parts of the memory and return different 4 bytes. This makes sense because it is likely that different processes put different 4 bytes at the top of their stack.</p><p>The illusion here is that a process can only see that it reads address <code>0x803FFFFC</code> while the operating system knows the translated address being used to access the memory. We thus call <code>0x803FFFFC</code> the <strong>virtual address</strong> in this case and, for every process, it is translated into a <strong>physical address</strong> for the actual memory access.</p><h3 id="address-translation" tabindex="-1">Address translation <a class="header-anchor" href="#address-translation" aria-label="Permalink to &quot;Address translation&quot;">​</a></h3><p>Let&#39;s read a data structure that records the translation from virtual to physical addresses.</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* library/egos.h */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RAM_END</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">80600000</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> APPS_PAGES_BASE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> 0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">80400000</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* earth/cpu_mmu.c */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PAGE_SIZE</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">       4096</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> APPS_PAGES_CNT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  (RAM_END </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> APPS_PAGES_BASE) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PAGE_SIZE</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> page_info {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> use;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pid;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    uint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vpage_no;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">page_info_table</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[APPS_PAGES_CNT];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>In egos-2000, the 2MB region of <code>[APPS_PAGES_BASE, RAM_END)</code> holds the code, data, heap and stack of all processes. Therefore, if a process reads a virtual address like <code>0x803FFFFC</code>, it will be translated into some physical address in this 2MB region. This 2MB is splitted into 512 pages (i.e., <code>APPS_PAGES_CNT=512</code>) and each page is 4KB (i.e., <code>PAGE_SIZE</code>).</p><p>There is a <code>struct page_info</code> for each of the 512 pages recording translation information. Suppose the operating system allocates page #6 (i.e., <code>[0x80406000, 0x80407000)</code>) for the stack top of a process with <code>pid=7</code>.</p><ul><li><p>The virtual address region <code>[0x803FF000, 0x80400000)</code> of this process directly translates to the physical address region <code>[0x80406000, 0x80407000)</code>. In other words, <code>0x803FFXXX</code> will be translated to physical address <code>0x80406XXX</code> for any <code>XXX</code> in <code>[0, PAGE_SIZE)</code>.</p></li><li><p>To record such translation in the data structure, <code>page_info_table[6].pid</code> should be set to <code>7</code> and <code>page_info_table[6].vpage_no</code> should be set to <code>0x803FF</code>. We call <code>0x803FF</code> the <em>virtual page number</em>, call <code>0x80406</code> the <em>physical page number</em>, call <code>6</code> the <em>physical page ID</em>, and lastly call <code>XXX</code> the <em>offset</em> within the page.</p></li></ul><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p>To make sure you understand, here is a simple exercise. Suppose the operating system allocates page #195 out of the 512 pages for the stack top of a process with <code>pid=12</code>. Suppose the process reads virtual address <code>0x803FF234</code> within its stack. What is the virtual page number, physical page number, physical page ID, and offset respectively for the address translation?</p></div><p>You should now have a concrete understanding of how the same virtual address (e.g., one in the stack) for different processes can be translated into different physical addresses.</p><h3 id="the-mmu-map-interface" tabindex="-1">The <code>mmu_map</code> interface <a class="header-anchor" href="#the-mmu-map-interface" aria-label="Permalink to &quot;The \`mmu_map\` interface&quot;">​</a></h3><p>The <code>mmu_map</code> interface in <code>struct earth</code> is responsible for recording such translations and <code>soft_tlb_map</code> is an implementation of this interface. The translation example above can be established by calling <code>earth-&gt;mmu_map(7, 0x803FF, 6)</code>.</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* library/egos.h */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> earth {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mmu_map)(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pid, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vpage_no, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ppage_id);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* earth/cpu_mmu.c */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> soft_tlb_map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> pid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> vpage_no</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> ppage_id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    page_info_table</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[ppage_id].pid      </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pid;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    page_info_table</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[ppage_id].vpage_no </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vpage_no;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">earth</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mmu_map </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> soft_tlb_map;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* when earth-&gt;translation is SOFT_TLB */</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>Next, let&#39;s read how <code>earth-&gt;mmu_map</code> is used in <code>library/elf/elf.c</code> where the operating system initializes the memory for every new process. Intuitively, when spawning a process, the operating system allocates some pages for the code, data, heap, and stack of the new process, leading to the <code>mmu_alloc</code> function.</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* earth/cpu_mmu.c */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mmu_alloc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> APPS_PAGES_CNT; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">page_info_table</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[i].use) {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">            page_info_table</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[i].use </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    FATAL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;mmu_alloc: no more free memory&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* library/elf/elf.c */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> elf_load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> pid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, elf_reader </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">reader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> argc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void**</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> argv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ppage_id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> earth-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mmu_alloc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   earth-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mmu_map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pid, VPAGE_NO, ppage_id);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   /* This pattern appears 5 times in the code with different VPAGE_NO. */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>The <code>mmu_alloc</code> function returns a physical page ID. <code>VPAGE_NO</code> stands for the virtual page number. For code, data, and heap, <code>VPAGE_NO</code> starts at <code>0x80400</code> and the number of pages allocated/mapped depends on the size of the application binary. For arguments of <code>main()</code> and system call arguments, two pages are allocated/mapped with <code>VPAGE_NO</code> <code>0x80300</code> and <code>0x80301</code>. For stack, we map two pages with <code>VPAGE_NO</code> being <code>0x803FE</code> and <code>0x803FF</code>, and we assume that processes use at most 8KB of stack memory just for simplicity. The picture below illustrates <code>elf_load</code> for an application with 4 pages of code, data, and heap.</p><p><img src="`+t+'" alt="Failed to load picture"></p><p>Note that the &quot;physical pages&quot; area simply shows one possibility of how <code>mmu_alloc</code> picks the physical page ID out of <code>[0, 512)</code> for each of the 8 allocations.</p><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p>A few other places are referencing these numbers. The <code>ORIGIN = 0x80200000</code> in <code>library/elf/app.lds</code> indicates that the compiler puts the application binary code at virtual page <code>0x80200</code>. The <code>li sp,0x80400000</code> in <code>apps/app.s</code> indicates that all applications use the virtual page <code>0x803FF</code> as the stack top. The <code>APPS_ARG</code> and <code>SYSCALL_ARG</code> in <code>library/egos.h</code> are defined as <code>0x80300000</code> and <code>0x80301000</code> respectively.</p></div><h3 id="the-mmu-switch-interface" tabindex="-1">The <code>mmu_switch</code> interface <a class="header-anchor" href="#the-mmu-switch-interface" aria-label="Permalink to &quot;The `mmu_switch` interface&quot;">​</a></h3><p>As you may have noticed, <code>proc_yield</code> invokes <code>earth-&gt;mmu_switch</code> for the next process being scheduled. <code>soft_tlb_switch</code> is a simple implementation of <code>earth-&gt;mmu_switch</code>. When switching from process A to process B, <code>soft_tlb_switch</code> does two things.</p><p>First, it copies all the pages mapped for process A back to the buffer of 512 pages.</p><p><img src="'+n+'" alt="Failed to load picture"></p><p>Second, it copies all the pages mapped for process B back to <code>[0x80200000, 0x80400000)</code>.</p><p><img src="'+l+'" alt="Failed to load picture"></p><p>Note that, in the two pictures above, all the areas indicate physical memory. In other words, we use the 4MB physical memory region <code>[0x80200000, 0x80600000)</code> to create an illusion that every process owns the 2MB memory region <code>[0x80200000, 0x80400000)</code> exclusively.</p><p>Whenever <code>proc_yield</code> picks a process to run next, <code>soft_tlb_switch</code> makes sure that the process can access its own bytes when invoking a load or store instruction with an address in the region <code>[0x80200000, 0x80400000)</code>. Furthermore, recall that you set a PMP region for <code>[0x80200000, 0x80400000)</code> in P3. As a result, if a process is running in the user mode, this process cannot access the memory pages of other processes which, as shown above, have been kept in memory region <code>[0x80400000, 0x80600000)</code>. This achieves the important goal of memory isolation described at the beginning of this handout.</p><p><code>soft_tlb_switch</code> has two loops which query <code>page_info_table</code> and conduct the memory copy shown in the pictures above. After <code>soft_tlb_switch</code>, function <code>soft_tlb_translate</code> in <code>earth/cpu_mmu.c</code> simply assumes that <code>vaddr</code> is a virtual address within <code>[0x80200000, 0x80400000)</code> and returns <code>vaddr</code> itself as the translated physical address.</p><h2 id="page-table-translation" tabindex="-1">Page table translation <a class="header-anchor" href="#page-table-translation" aria-label="Permalink to &quot;Page table translation&quot;">​</a></h2><p>You have seen an implementation of virtual memory using PMP and software TLB (i.e., the memory copying conducted by <code>soft_tlb_switch</code>). However, frequent memory copying is the performance bottleneck of many programs including operating systems. To avoid such bottleneck, we introduce page table translation, the CPU support leading to a more efficient implementation of the virtual memory interface (<code>mmu_map</code> and <code>mmu_switch</code>).</p><p>Read Chapters 12.1.11 and 12.3 of <a href="assets/riscv-privileged-20241101.pdf">the RISC-V Instruction Set Manual</a>. They describe a page table translation scheme in RISC-V called Sv32. Next, we will only sketch the key concepts of Sv32 and give an example of such translation.</p><h3 id="root-and-leaf-page-tables" tabindex="-1">Root and leaf page tables <a class="header-anchor" href="#root-and-leaf-page-tables" aria-label="Permalink to &quot;Root and leaf page tables&quot;">​</a></h3><p>In Sv32, a page table holds 1024 entries where each entry holds 4 bytes. Therefore, a page table occupies exactly 4KB of memory (i.e., one page). Page tables further form a two-level tree data structure with one root page table and several leaf page tables. The picture below shows an example of such tree data structure in the memory with 3 page tables.</p><p><img src="'+p+'" alt="Failed to load picture"></p><p>When tracing this tree data structure, the CPU first reads a CSR called <code>satp</code> which stores the address of the root page table. The picture shows a case where 1022 entries in the root page table are empty and 2 entries are non-empty, holding the address of a leaf page table. When we say &quot;the address&quot; of a page table, we mean the physical address that the CPU is using to access the memory instead of a virtual address belonging to a process.</p><h3 id="translation-details" tabindex="-1">Translation details <a class="header-anchor" href="#translation-details" aria-label="Permalink to &quot;Translation details&quot;">​</a></h3><p>On the high level, the operating system is in charge of allocating the pages for page tables, initializing the page table entries, and writing to the <code>satp</code> CSR. When a process is running and reading/writing the memory, the CPU is in charge of reading <code>satp</code> and the page tables in order to translate memory addresses.</p><p>Below is an example of how the operating system could initialize the page tables such that the CPU will translate virtual address <code>0x803F_EXXX</code> into physical address <code>0x804A_DXXX</code> for a process. Again, <code>XXX</code> stands for any offset in the range <code>[0, PAGE_SIZE)</code>.</p><p><img src="'+o+'" alt="Failed to load picture"></p><h4 id="initialize-the-satp-csr" tabindex="-1">Initialize the <code>satp</code> CSR <a class="header-anchor" href="#initialize-the-satp-csr" aria-label="Permalink to &quot;Initialize the `satp` CSR&quot;">​</a></h4><p>As the first step, the operating system invokes <code>mmu_alloc</code> and allocates a page for the root page table. As shown above, this page is <code>0x805F_1000</code> (i.e., the return value of <code>mmu_alloc</code> is <code>0x805F1-0x80400=0x1F1</code>, the physical page ID). Given physical page number <code>0x805F1</code>, we can write <code>0x800805F1</code> into the <code>satp</code> CSR after which the CPU can find this root page table, according to Figure 63 of <a href="assets/riscv-privileged-20241101.pdf">the RISC-V Manual</a>.</p><p><img src="'+h+'" alt="Failed to load picture"></p><p>Note that the <code>MODE</code> bit is set to 1 meaning that page table translation is enabled. The <code>ASID</code> field is for performance optimization which we can ignore for now. Lastly, we put <code>0x805F1</code> into the <code>PPN</code> field of <code>satp</code>.</p><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p>You may have noticed that <code>0x805F1</code> has 20 bits but the <code>PPN</code> field of <code>satp</code> holds 22 bits. This is because 32-bit RISC-V CPUs support up to 16GB of physical memory and 22 bits can represent all addresses below 16GB. In egos-2000, all addresses are below 4GB, so 20 bits are enough.</p></div><h4 id="initialize-the-root-page-table" tabindex="-1">Initialize the root page table <a class="header-anchor" href="#initialize-the-root-page-table" aria-label="Permalink to &quot;Initialize the root page table&quot;">​</a></h4><p>As the second step, we need to find an entry in the root page table and initialize it using the address of the leaf page table. To find the entry, read Figure 65 of <a href="assets/riscv-privileged-20241101.pdf">the RISC-V Manual</a>.</p><p><img src="'+r+'" alt="Failed to load picture"></p><p>Specifically, we wish to translate virtual address <code>0x803F_EXXX</code> and, according to Figure 65, <code>VPN[1]</code> in address <code>0x803F_EXXX</code> is <code>0b1000000000</code> or <code>0x200</code> (i.e., the most significant ten bits). Therefore, in the picture above, we see that entry #512 from the 1024 ones in the root page table is used to translate virtual address <code>0x803F_EXXX</code>. To see how this entry should be initialized, read Figures 66 &amp; 67 of <a href="assets/riscv-privileged-20241101.pdf">the RISC-V Manual</a>.</p><p><img src="'+d+`" alt="Failed to load picture"></p><p>Note that the leaf page table is at physical address <code>0x8051_5000</code>, so the PPN is <code>0x80515</code>. According to Figure 67, we should use <code>0x80515</code> as bit#10 to bit#31 of the page table entry, so we can set the page table entry as <code>0x2014541F</code> (i.e., <code>(0x80515&lt;&lt;10) | 0x1F</code>) where the <code>0x1F</code> here means that we are setting the <code>V</code>, <code>R</code>, <code>W</code>, <code>X</code> and <code>U</code> bits to 1. Setting these bits to 1 means that we allow code running in the user mode to read, write, or execute this page of memory after translation. We can now use page tables to control memory access instead of PMP. To summarize, we have done the following things by far.</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">asm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">csrw satp, %0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ::</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">800805F1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">root </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">805F1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /* decided by earth-&gt;mmu_alloc */</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">root</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">512</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> 0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2014541F</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>The CPU can now find the leaf page table when translating virtual address <code>0x803F_EXXX</code>.</p><h4 id="initialize-the-leaf-page-table" tabindex="-1">Initialize the leaf page table <a class="header-anchor" href="#initialize-the-leaf-page-table" aria-label="Permalink to &quot;Initialize the leaf page table&quot;">​</a></h4><p>Figure 65 also tells us that the <code>VPN[0]</code> of <code>0x803F_EXXX</code> is <code>0b1111111110</code> or <code>0x3FE</code>. As a result, we will initialize entry #1022 (i.e., 0x3FE) of the leaf page table and, intuitively, we want to initialize this entry with physical address <code>0x804A_D000</code> to complete the translation. According to Figure 67, we should use the PPN <code>0x804AD</code> as bit #10 to bit #31 of this entry. We thus write <code>0x2012B41F</code> (i.e., <code>(0x804AD&lt;&lt;10) | 0x1F</code>) into entry #1022.</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">leaf </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">80515000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /* decided by earth-&gt;mmu_alloc */</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">leaf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1022</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> 0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2012B41F</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>At this point, the operating system has finished the initialization such that the CPU will now translate virtual address <code>0x803F_EXXX</code> into physical address <code>0x804A_DXXX</code>.</p><h2 id="get-started" tabindex="-1">Get started <a class="header-anchor" href="#get-started" aria-label="Permalink to &quot;Get started&quot;">​</a></h2><p>You can now use page table translation to implement virtual memory in <code>earth/cpu_mmu.c</code>. Start from a fresh copy of egos-2000 like before.</p><h3 id="identity-map" tabindex="-1">Identity map <a class="header-anchor" href="#identity-map" aria-label="Permalink to &quot;Identity map&quot;">​</a></h3><p>Read the <code>setup_identity_region</code> and <code>pagetable_identity_map</code> functions which set up an identity map, meaning that a virtual address is translated into a physical address of the same value (e.g., map <code>0x803F_EXXX</code> to <code>0x803F_EXXX</code>). They help you understand how to set up page table entries with C code.</p><p>Then read the <code>page_table_map</code> and <code>page_table_switch</code> functions. You can see that they simply call <code>soft_tlb_map</code> and <code>soft_tlb_switch</code>. Hence, when you choose &quot;page tables&quot; as shown below, egos-2000 will enable page table translation with an identity map and still use software TLB to conduct address translation.</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cd egos-2000</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> make qemu</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[CRITICAL] Choose a memory translation mechanism:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Enter</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 0:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> page</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tables</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Enter</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 1:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> software</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> TLB</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[INFO] Page table translation is chosen</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>With identity map, the CPU will conduct page table translations in a pretty useless way. Still, if we make mistakes in the identity map code, there could be memory exceptions after page table translation starts to take effect. In particular, page table translation starts to take effect in egos-2000 after the <code>mret</code> in <code>grass/init.c</code>.</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mstatus, M_MODE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, U_MODE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GRASS_MODE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (earth</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">translation </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SOFT_TLB) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> M_MODE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> U_MODE;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">asm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">csrr %0, mstatus</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mstatus));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mstatus </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (mstatus </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ~</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 11</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (GRASS_MODE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 11</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">asm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">csrw mstatus, %0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ::</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mstatus));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">asm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">mret</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>Code running in the machine mode always accesses the memory with physical addresses. If <code>earth-&gt;translation == PAGE_TABLE</code>, the CPU will switch to user mode (<code>U_MODE</code>) after <code>mret</code> and run the code of the first process. Since we have enabled Sv32 in the <code>satp</code> CSR and page table translation certainly takes effects in user mode, page table translation starts to take effect right after this <code>mret</code>. In general, all processes should run in user mode while page table translation takes effect, and the kernel should always run in machine mode using physical addresses.</p><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p>There actually exists a third privilege mode called supervisor mode (<code>S_MODE = 1</code>) and the <code>s</code> in <code>satp</code> stands for supervisor mode, just like the <code>m</code> in <code>mstatus</code> stands for machine mode. Code in machine mode can access the CSRs for supervisor mode, but not vice versa. We are not using this supervisor mode for simplicity -- you only need to reason about two privilege modes.</p></div><h3 id="page-tables-per-process" tabindex="-1">Page tables per process <a class="header-anchor" href="#page-tables-per-process" aria-label="Permalink to &quot;Page tables per process&quot;">​</a></h3><p>After understanding the existing code for page table translation in egos-2000, your job is to create <strong>one set of page tables for every process</strong>. Read the hints in <code>page_table_map</code>. When invoking <code>page_table_map</code> for process <code>pid</code> for the first time, you should initialize the root and leaf page tables for <code>pid</code>. For system processes, this means that you should set up an identity map just like before. For user processes, set up an identity map only for one page at <code>SHELL_WORK_DIR</code> which is the address of <code>workdir</code> in <code>apps/app.h</code>. All the processes in egos-2000 share the same work directory, which is the directory shown in the shell. Save the address of the root page table in <code>pid_to_pagetable_base[pid]</code>, and modify the page table entries based on the arguments of <code>page_table_map</code>.</p><p>In addition, you need to update function <code>page_table_switch</code> by modifying the <code>satp</code> CSR with the address of the root page table of process <code>pid</code>. Recall that this function is invoked by <code>proc_yield</code> for context switch. Lastly, implement the <code>page_table_translate</code> function which returns the physical address mapped from <code>vaddr</code> for process <code>pid</code>.</p><p>It is possible to reuse both <code>setup_identity_region</code> and <code>pagetable_identity_map</code> as is, but feel free to modify them if you find it necessary. After you finish, you should be able to boot up egos-2000 normally and run commands like <code>cat README</code> or <code>echo Hello!</code>.</p><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p>In real-world operating systems like Linux, the difference between <strong>process</strong> and <strong>thread</strong> is more on the conceptual level instead of the code level. Specifically, if two processes share the <em>same</em> root page table, we can call them two threads within one process because they share the memory.</p></div><h3 id="kill-malicious-applications" tabindex="-1">Kill malicious applications <a class="header-anchor" href="#kill-malicious-applications" aria-label="Permalink to &quot;Kill malicious applications&quot;">​</a></h3><p>Recall that, in P3, your code for memory protection can prevent malicious applications like <code>crash1</code> and <code>crash2</code> from halting the operating system. You can do the same using page table translation. Terminate the current process in <code>excp_entry()</code> of <code>grass/kernel.c</code> if it raises an exception, and ensure that the OS proceeds normally after <code>crash1</code> and <code>crash2</code>.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&gt; make qemu</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span>[CRITICAL] Choose a memory translation mechanism:</span></span>
<span class="line"><span>Enter 0: page tables</span></span>
<span class="line"><span>Enter 1: software TLB</span></span>
<span class="line"><span>[INFO] Page table translation is chosen</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span>[CRITICAL] Welcome to the egos-2000 shell!</span></span>
<span class="line"><span>➜ /home/yunhao crash1</span></span>
<span class="line"><span>_sbrk: heap grows too large</span></span>
<span class="line"><span>[INFO] process 6 terminated with exception 15</span></span>
<span class="line"><span>➜ /home/yunhao crash2</span></span>
<span class="line"><span>[INFO] process 7 terminated with exception 15</span></span>
<span class="line"><span>...</span></span></code></pre></div><h3 id="memory-overhead" tabindex="-1">Memory overhead <a class="header-anchor" href="#memory-overhead" aria-label="Permalink to &quot;Memory overhead&quot;">​</a></h3><p>We have never talked about how to free page tables when a process terminates. The key is that the <code>proc_free</code> function in <code>grass/process.c</code> invokes <code>earth-&gt;mmu_free(pid)</code>.</p><p>For all page tables allocated for process <code>pid</code>, if we set the <code>pid</code> field of the corresponding <code>page_info_table</code> entries correctly, the page tables should be freed by <code>mmu_free</code> just like the other pages of the terminated process. Nothing special needs to be done.</p><p>However, given that page table translation incurs memory overhead, we ask you to print out such overhead in <code>mmu_free</code> as follows.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&gt; make qemu</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span>➜ /home/yunhao echo Hello, World!</span></span>
<span class="line"><span>Hello, World!</span></span>
<span class="line"><span>[INFO] mmu_free released 11 pages (2 are page tables) for process 6</span></span></code></pre></div><p>Make sure you can explain the numbers that you print out in <code>mmu_free</code>.</p><h2 id="accomplishments" tabindex="-1">Accomplishments <a class="header-anchor" href="#accomplishments" aria-label="Permalink to &quot;Accomplishments&quot;">​</a></h2><p>You have finished reading <code>library/elf</code> and <code>earth/cpu_mmu.c</code> in egos-2000, and learned how to create the virtual memory illusion for different processes. You have also understood precisely the difference between <em>threads</em> and <em>processes</em>, which is closely related to the root page table of the page table translation mechanism.</p>`,88),g=[k];function m(u,y,E,b,f,F){return a(),e("div",null,g)}const v=s(c,[["render",m]]);export{w as __pageData,v as default};
