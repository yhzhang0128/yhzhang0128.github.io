import{_ as t,c as e,o as r,a2 as o}from"./chunks/framework.CeQAp18V.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"book/overview.md","filePath":"book/overview.md"}'),a={name:"book/overview.md"},d=o('<blockquote> “What I cannot create, I do not understand.”    — Richard Feynman (1918-1988) </blockquote><p>This little book contains a series of course projects based on <a href="https://github.com/yhzhang0128/egos-2000" target="_blank" rel="noreferrer">egos-2000</a>. The goal is to help students gain experience and confidence in <strong>creating</strong> their own operating systems or similar computer systems in their future careers.</p><h3 id="core-projects" tabindex="-1">Core projects <a class="header-anchor" href="#core-projects" aria-label="Permalink to &quot;Core projects&quot;">​</a></h3><p>There are <strong>6 core projects</strong> covering the key OS concepts for an undergraduate-level OS course such as Cornell CS4411. The projects <strong>introduce the architectural support for OS one by one</strong> which students have found very helpful. For example, students will play with timer and scheduler without any knowledge of privilege modes or page tables.</p><table tabindex="0"><thead><tr><th></th><th>OS concepts</th><th>Architectural support</th></tr></thead><tbody><tr><td>P0: Hello, World!</td><td>code, data, heap, stack</td><td>user-level ISA</td></tr><tr><td>P1: Cooperative Threads</td><td>thread, yield, context switch</td><td></td></tr><tr><td>P2: Preemptive Scheduler</td><td>interrupt and exception handling</td><td>control register, timer</td></tr><tr><td>P3: System Call &amp; Protection</td><td>inter-process communication</td><td>privilege mode</td></tr><tr><td>P4: Virtual Memory</td><td>process, virtual address space</td><td>page table translation</td></tr><tr><td>P6: File System</td><td>block, inode, file, directory</td><td></td></tr></tbody></table><h3 id="advanced-projects" tabindex="-1">Advanced projects <a class="header-anchor" href="#advanced-projects" aria-label="Permalink to &quot;Advanced projects&quot;">​</a></h3><p>There are <strong>3 advanced projects</strong> for a master-level OS course such as Cornell CS5411.</p><table tabindex="0"><thead><tr><th></th><th>OS concepts</th><th>Architectural support</th></tr></thead><tbody><tr><td>P5: Serial Device Driver</td><td>synchronous I/O</td><td>serial bus, memory-mapped I/O</td></tr><tr><td>P7: Ethernet &amp; TCP/IP</td><td>asynchronous I/O</td><td>platform-level interrupt controller</td></tr><tr><td>P8: Multicore &amp; Locks</td><td>bootloader, mutual exclusion</td><td>atomic memory operation</td></tr></tbody></table><p>All the projects can run on <a href="https://www.qemu.org/" target="_blank" rel="noreferrer">QEMU</a> as well as real RISC-V hardware. Now, let&#39;s get our hands dirty and have fun with OS!</p>',9),s=[d];function n(c,i,l,h,p,u){return r(),e("div",null,s)}const g=t(a,[["render",n]]);export{b as __pageData,g as default};
